
//PROTOTYPAL ADDS
//==============================================================================

Object.defineProperty( Array.prototype, 'last', {
  value: function(){
    return this.length > 0 ? this[this.length - 1] : null; 
  },
  enumerable: false
});

Object.defineProperty( Array.prototype, 'getRandom', {
  value: function(prev_idxs){
    var min, max, rand;

    if(this.length == 0 || prev_idxs.length == this.length){
        return;
    }

    min = 0;
    max = this.length;
    rand = Math.floor(Math.random() * (max - min)) + min;

    while(prev_idxs.contains(rand)){
        rand = Math.floor(Math.random() * (max - min)) + min;
    }

    prev_idxs.push(rand);
    return this[rand];
  },
  enumerable: false
});

Object.defineProperty( Array.prototype, 'getRandomValues', {
  value: function(num_vals){
    var prev, vals;

    prev = [];
    vals = [];

    for(var i = 0; i < num_vals; i++){
        vals.push(this.getRandom(prev));
    }

    return vals;
  },
  enumerable: false
});

Object.defineProperty( Array.prototype, 'contains', {
  value: function(obj){
    return this.indexOf(obj) != -1;
  },
  enumerable: false
});

//GAME CLASSES
//==============================================================================

var AI = function(players){
    this.level = 0;
    this.game = new Game(this.level, players);
}

AI.prototype.nextGame = function() {
    this.level++;
    this.game = new Game(this.level);
};

AI.prototype.nextRound = function() {
    if(this.game.curr_round){
        this.game.addRound(this.game.curr_round);
    }

    this.game.rounds.push(new Round());
};

AI.prototype.playCard = function(player, card) {
    this.game.rounds.last().playTurn(player, card);
};

AI.prototype.pickRoundWinner = function() {
    var winner = null;

    this.game.round_rules.forEach(function(rule){
        winner = (rule.pickWinner(this.game) || winner);
    }.bind(this));

    this.game.rounds.last().winner = winner;
    return winner;
};

AI.prototype.pickHandWinner = function() {
    return this.game.hand_rule.pickWinner(this.game);
};


/**
 * A Game holds all of the state for the current game being played. This includes
 * the rules of the game and the rounds that have been played in order.
 * @param {int} level 
 */
var Game = function(level, players){
    this.round_rules = this.getRoundRules(level + 3);
    this.hand_rule = this.getHandRule();
    this.rounds = [];
    this.players = players;
    this.curr_round = null;
}

Game.prototype.getRoundRules = function(num_rules) {
    return ROUNDRULES;//.getRandomValues(num_rules);
};

Game.prototype.getHandRule = function() {
    return HANDRULES[0];//.getRandom([]);
};

Game.prototype.addRound = function(round) {
    this.rounds.push(round);
};


/**
 * Round holds the information for each round of play. A round ends once every
 * player has played a card.
 */
var Round = function(){
    this.turns = [];
    this.winner = null;
}

Round.prototype.playTurn = function(player, card) {
    this.turns.push({ 'player' : player, 'card': card });
};



/**
 * Rule to determine who won either a hand or a round
 * @param {function} solver function that takes a game and determines the winner 
 * of either the current round or of the whole hand
 */
var Rule = function(solver){
    this.solver = solver
}

Rule.prototype.pickWinner = function(game) {
    return this.solver(game);
};


//GAME CONSTANTS
//==============================================================================
function highCardWins(game){
    var round, winner;

    winner = null;
    round = game.rounds.last();
    
    round.turns.forEach(function(turn){
        if(!winner){
            winner = turn;
        }

        if(winner.card.value < turn.card.value){
            winner = turn;
        }
    });

    return winner;
}

function eightsAreWild(game){
    var round, winner;

    winner = null;
    round = game.rounds.last();

    round.turns.forEach(function(turn){
        if(turn.card.value == 8 && (!winner || winner.card.value != 8)){
            winner = turn;
        }
    });

    return winner;
}

var ROUNDRULES = [
    new Rule(highCardWins),
    new Rule(eightsAreWild)
]

function MostRounds(game){
    var rounds, winner;

    rounds = game.rounds;

    winner = rounds[0].winner
    rounds.forEach(function(round){
        round.winner.player.rounds_won++

        if(winner.player.rounds_won < round.winner.player.rounds_won){
            winner = round.winner;
        }
    });

    return winner.player;
}

var HANDRULES = [
    new Rule(MostRounds)
]


//MOCKS...NOT REAL CLASSES
var Player = function(name){
    this.rounds_won = 0;
    this.name = name;
}

var Card = function(val){
    this.value = val;
}

//SIMULATION!!!

var charlie = new Player('charlie'),
    ryan = new Player('ryan'),
    matt = new Player('matt'),
    tina = new Player('tina');

var users = [
    charlie,
    ryan,
    matt,
    tina    
];

var ai = new AI(users);

ai.nextRound()
ai.playCard(charlie, new Card(4));
ai.playCard(ryan, new Card(5));
ai.playCard(matt, new Card(2));
ai.playCard(tina, new Card(9));

//should be tina
console.log(ai.pickRoundWinner());



ai.nextRound();
ai.playCard(charlie, new Card(2));
ai.playCard(ryan, new Card(9));
ai.playCard(matt, new Card(5));
ai.playCard(tina, new Card(4));

//should be ryan
console.log(ai.pickRoundWinner());


ai.nextRound();
ai.playCard(charlie, new Card(4));
ai.playCard(ryan, new Card(5));
ai.playCard(matt, new Card(8));
ai.playCard(tina, new Card(9));

//should be matt
console.log(ai.pickRoundWinner());

ai.nextRound();
ai.playCard(charlie, new Card(4));
ai.playCard(ryan, new Card(5));
ai.playCard(matt, new Card(8));
ai.playCard(tina, new Card(8));

//should be matt
console.log(ai.pickRoundWinner());

console.log('\n\n');
console.log(ai.pickHandWinner());








