var Card = require('cards');

function Hand(size, opts){
  this.cards = [];
  this.user_card = opts.user_card;
  this.rotate = opts.rotate;
  this.position = opts.position;
  this.player = opts.player;
  this.ai = opts.ai;

  var card;
  for(var i = 0; i < size; i++){
    card = new Card(i, this.user_card, this.rotate, i);
    
    // if(this.position == "bottom"){
      card.elem.onclick = function(index){
        // if(this.player.is_turn){
          this.playCard(index);
        // }
      }.bind(this,[i]);
    // }

    this.cards.push(card);
  }
}

Hand.prototype.show = function(anchor){
  var startx, starty, cardSz, neededLength, padding, shift, outter;

  shift = this.user_card ? 50 : 20;
  startx = anchor.documentOffsetLeft;
  starty = anchor.documentOffsetTop;

  cardSz = this.rotate ? getInDomHeight(this.cards[0].elem) : getInDomWidth(this.cards[0].elem);
  neededLength = cardSz + ((this.cards.length - 1) * shift);

  outter = this.rotate ? anchor.getBoundingClientRect().height : anchor.getBoundingClientRect().width;
  padding = (outter - neededLength) / 2;

  if(this.rotate){
    startx += 10;
    starty += padding;
  } else {
    startx += padding;
    starty += 10;
  }

  this.cards.forEach(function(card, i){
    var e = card.elem;

    e.style.position = 'absolute';

    if(this.rotate){
      e.style.top      = starty + 'px';
      e.style.left     = startx + 'px';
      starty += shift;
    } else {
      e.style.top      = starty + 'px';
      e.style.left     = startx + 'px';
      startx += shift;
    }

    anchor.appendChild(e);
  }.bind(this));

  return this;
}

Hand.prototype.playCard = function(i) {
  switch(this.position){
    case "left":
      playLeftCard(i);
      break;
    case "right":
      playRightCard(i);
      break;
    case "top":
      playTopCard(i);
      break;
    case "bottom":
      playBottomCard(i);
      break; 
  }

  this.ai.playCard(this.player, this.cards[i]);
};

function getInDomWidth(elem){
  var width, e;

  e = $(elem).clone(false);
  e.css({visibility: 'hidden'});

  e.appendTo('body');
  width = e.width();
  e.remove();

  return width;
}

function getInDomHeight(elem){
  var width, e;

  e = $(elem).clone(false);
  e.css({visibility: 'hidden'});

  e.appendTo('body');
  width = e.height();
  e.remove();

  return width;
}

function playLeftCard(i){
  var children, parent, newTop, newLeft;

  parent = $('#game-screen-side-left');
  children = parent.children();

  newTop = (parent.height() / 2) -  (parseInt($(children[i]).height()) / 2) + 'px';
  newLeft = parseInt(children[i].style.left) + (parseInt($(children[i]).width()) * 1.5) + 'px';

  children[i].style.top = newTop;
  children[i].style.left = newLeft;
}

function playRightCard(i){
  var children, parent, newTop, newLeft;

  parent = $('#game-screen-side-right');
  children = parent.children();

  newTop = (parent.height() / 2) -  (parseInt($(children[i]).height()) / 2) + 'px';
  newLeft = parseInt(children[i].style.left) - (parseInt($(children[i]).width()) * 1.5) + 'px';

  children[i].style.top = newTop;
  children[i].style.left = newLeft;
}

function playTopCard(i){
  var children, parent, newTop, newLeft;

  parent = $('#game-screen-top');
  children = parent.children();

  newLeft = (parent.width() / 2) + $('#game-screen-side-left').width() -  (parseInt($(children[i]).width()) / 1) + 'px';
  newTop = parseInt(children[i].style.top) + parseInt($(children[i]).height()) + 10 + 'px';

  children[i].style.top = newTop;
  children[i].style.left = newLeft;
}

function playBottomCard(i){
  var children, parent, newTop, newLeft;

  console.log(i);

  parent = $("#game-screen-bottom");
  children = parent.children();

  newLeft = (parent.width() / 2) + $('#game-screen-side-left').width() -  (parseInt($(children[i]).width()) / 3) + 'px';
  newTop = parseInt(children[i].style.top) - parseInt($(children[i]).height()) - 10 + 'px';

  children[i].style.top = newTop;
  children[i].style.left = newLeft;
}

module.exports = Hand;