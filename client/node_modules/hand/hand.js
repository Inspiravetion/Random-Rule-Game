var Card = require('cards');

function Hand(size, user_card, rotate){
  this.cards = [];
  this.user_card = user_card;
  this.rotate = rotate;

  for(var i = 0; i < size; i++){
    this.cards.push(new Card(i, user_card, rotate));
  }
}

Hand.prototype.show = function(anchor){
  var startx, starty, cardSz, neededLength, padding, shift, outter;

  shift = this.user_card ? 50 : 20;
  startx = anchor.documentOffsetLeft;
  starty = anchor.documentOffsetTop;

  cardSz = this.rotate ? getInDomHeight(this.cards[0].elem) : getInDomWidth(this.cards[0].elem);
  neededLength = cardSz + ((this.cards.length - 1) * shift);

  outter = this.rotate ? anchor.getBoundingClientRect().height : anchor.getBoundingClientRect().width;
  padding = (outter - neededLength) / 2;

  if(this.rotate){
    startx += 10;
    starty += padding;
  } else {
    startx += padding;
    starty += 10;
  }

  this.cards.forEach(function(card, i){
    var e = card.elem;

    e.style.position = 'absolute';

    if(this.rotate){
      e.style.top      = starty + 'px';
      e.style.left     = startx + 'px';
      starty += shift;
    } else {
      e.style.top      = starty + 'px';
      e.style.left     = startx + 'px';
      startx += shift;
    }

    anchor.appendChild(e);
  }.bind(this));
}

function getInDomWidth(elem){
  var width, e;

  e = $(elem).clone(false);
  e.css({visibility: 'hidden'});

  e.appendTo('body');
  width = e.width();
  e.remove();

  return width;
}

function getInDomHeight(elem){
  var width, e;

  e = $(elem).clone(false);
  e.css({visibility: 'hidden'});

  e.appendTo('body');
  width = e.height();
  e.remove();

  return width;
}

module.exports = Hand;