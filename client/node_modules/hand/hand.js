var Card = require('cards');

var CARDVALUES = [
  { val: 1, src: 'prod/images/1.jpg' },
  { val: 2, src: 'prod/images/2.jpg' },
  { val: 3, src: 'prod/images/3.jpg' },
  { val: 4, src: 'prod/images/4.jpg' },
  { val: 5, src: 'prod/images/5.jpg' },
  { val: 6, src: 'prod/images/6.jpg' },
  { val: 7, src: 'prod/images/7.jpg' },
  { val: 8, src: 'prod/images/8.jpg' },
  { val: 9, src: 'prod/images/9.jpg' },
  { val: 10, src: 'prod/images/10.jpg' }
];

function Hand(size, opts){
  this.cards = [];
  this.user_card = opts.user_card;
  this.rotate = opts.rotate;
  this.position = opts.position;
  this.player = opts.player;
  this.ai = opts.ai;
  this.prev_played = [];

  CARDVALUES.getRandomValues(size).forEach(function(cardInfo, i){
    var card = new Card(i, this.user_card, this.rotate, cardInfo.val, cardInfo.src);

    if(this.position == "bottom"){
      card.elem.onclick = function(index){
        if(this.player.is_turn){
          this.playCard(index);
          this.player.is_turn = false;
          this.ai.playBotHands();
        } 
      }.bind(this,[i]);
    }
    
    this.cards.push(card);
  }.bind(this));
}

Hand.prototype.playRandomCard = function() {
  this.playCard(this.cards.getRandomIndex(this.prev_played));
};

Hand.prototype.show = function(anchor){
  var startx, starty, cardSz, neededLength, padding, shift, outter;

  shift = this.user_card ? 50 : 20;
  startx = anchor.documentOffsetLeft;
  starty = anchor.documentOffsetTop;

  cardSz = this.rotate ? getInDomHeight(this.cards[0].elem) : getInDomWidth(this.cards[0].elem);
  neededLength = cardSz + ((this.cards.length - 1) * shift);

  outter = this.rotate ? anchor.getBoundingClientRect().height : anchor.getBoundingClientRect().width;
  padding = (outter - neededLength) / 2;

  if(this.rotate){
    startx += (anchor.getBoundingClientRect().width - cardSz) * 1.9;
    starty += padding;
  } else {
    startx += padding;
    starty += 10;
  }

  this.cards.forEach(function(card, i){
    var e = card.elem;

    e.style.position = 'absolute';

    if(this.rotate){
      e.style.top      = starty + 'px';
      e.style.left     = startx + 'px';
      starty += shift;
    } else {
      e.style.top      = starty + 'px';
      e.style.left     = startx + 'px';
      startx += shift;
    }

    anchor.appendChild(e);
  }.bind(this));

  return this;
}

Hand.prototype.playCard = function(i) {
  switch(this.position){
    case "left":
      this.playLeftCard(i);
      break;
    case "right":
      this.playRightCard(i);
      break;
    case "top":
      this.playTopCard(i);
      break;
    case "bottom":
      this.playBottomCard(i);
      break; 
  }

  this.ai.playCard(this.player, this.cards[i]);
};

function getInDomWidth(elem){
  var width, e;

  e = $(elem).clone(false);
  e.css({visibility: 'hidden'});

  e.appendTo('body');
  width = e.width();
  e.remove();

  return width;
}

function getInDomHeight(elem){
  var width, e;

  e = $(elem).clone(false);
  e.css({visibility: 'hidden'});

  e.appendTo('body');
  width = e.height();
  e.remove();

  return width;
}

Hand.prototype.playLeftCard = function(i){
  var children, parent, newTop, newLeft;

  parent = $('#game-screen-side-left');
  children = parent.children();

  newTop = (parent.height() / 2) -  (parseInt($(children[i]).height()) / 2) + 'px';
  newLeft = parseInt(children[i].style.left) + (parseInt($(children[i]).height()) * 1.5) + 'px';

  children[i].style.top = newTop;
  children[i].style.left = newLeft;
  this.cards[i].show();
}

Hand.prototype.playRightCard = function(i){
  var children, parent, newTop, newLeft;

  parent = $('#game-screen-side-right');
  children = parent.children();

  newTop = (parent.height() / 2) -  (parseInt($(children[i]).height()) / 2) + 'px';
  newLeft = parseInt(children[i].style.left) - (parseInt($(children[i]).height()) * 1.5) + 'px';

  children[i].style.top = newTop;
  children[i].style.left = newLeft;
  this.cards[i].show();
}

Hand.prototype.playTopCard = function(i){
  var children, parent, newTop, newLeft;

  parent = $('#game-screen-top');
  children = parent.children();

  newLeft = (parent.width() / 2) + $('#game-screen-side-left').width() -  (parseInt($(children[i]).width()) / 1) + 'px';
  newTop = parseInt(children[i].style.top) + parseInt($(children[i]).height()) + 10 + 'px';

  children[i].style.top = newTop;
  children[i].style.left = newLeft;
  this.cards[i].show();
}

Hand.prototype.playBottomCard = function(i){
  var children, parent, newTop, newLeft;

  parent = $("#game-screen-bottom");
  children = parent.children();

  newLeft = (parent.width() / 2) + $('#game-screen-side-left').width() -  (parseInt($(children[i]).width()) / 3) + 'px';
  newTop = parseInt(children[i].style.top) - parseInt($(children[i]).height()) - 10 + 'px';

  children[i].style.top = newTop;
  children[i].style.left = newLeft;
}

module.exports = Hand;